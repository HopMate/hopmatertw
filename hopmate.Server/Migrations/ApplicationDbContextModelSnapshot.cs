// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using hopmate.Server.Data;

#nullable disable

namespace hopmate.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[normalized_name] IS NOT NULL");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("user_tokens", (string)null);
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("HasDrivingLicense")
                        .HasColumnType("bit")
                        .HasColumnName("has_driving_license");

                    b.Property<int>("Hops")
                        .HasColumnType("int")
                        .HasColumnName("hops");

                    b.Property<string>("ImageFilePath")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_file_path");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("lockout_end");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasColumnName("points");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[normalized_user_name] IS NOT NULL");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("color", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Black"
                        },
                        new
                        {
                            Id = 2,
                            Name = "White"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Red"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Blue"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Gray"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Silver"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Green"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Yellow"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Orange"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Brown"
                        });
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.Driver", b =>
                {
                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_user");

                    b.Property<string>("DrivingLicense")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("driving_license");

                    b.HasKey("IdUser");

                    b.ToTable("driver", (string)null);
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("file_path");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("image", (string)null);
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("address");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("postal_code");

                    b.HasKey("Id");

                    b.ToTable("location", (string)null);
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.Passenger", b =>
                {
                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_user");

                    b.HasKey("IdUser");

                    b.ToTable("passenger", (string)null);
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.PassengerTrip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateRequest")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_request");

                    b.Property<Guid>("IdLocation")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_location");

                    b.Property<Guid>("IdPassenger")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_passenger");

                    b.Property<int>("IdRequestStatus")
                        .HasColumnType("int")
                        .HasColumnName("id_request_status");

                    b.Property<Guid>("IdTrip")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_trip");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("location_name");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reason");

                    b.HasKey("Id");

                    b.HasIndex("IdLocation");

                    b.HasIndex("IdPassenger");

                    b.HasIndex("IdRequestStatus");

                    b.HasIndex("IdTrip");

                    b.ToTable("passenger_trip", (string)null);
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.Penalty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int>("Hops")
                        .HasColumnType("int")
                        .HasColumnName("hops");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_user");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasColumnName("points");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.ToTable("penalty", (string)null);
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.RequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("request_status", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Status = "Accepted"
                        },
                        new
                        {
                            Id = 3,
                            Status = "Rejected"
                        },
                        new
                        {
                            Id = 4,
                            Status = "WaitingList"
                        },
                        new
                        {
                            Id = 5,
                            Status = "Cancelled"
                        });
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("DateReview")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_review");

                    b.Property<Guid>("IdDriver")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_driver");

                    b.Property<Guid>("IdPassenger")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_passenger");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.HasKey("Id");

                    b.HasIndex("IdDriver");

                    b.HasIndex("IdPassenger");

                    b.ToTable("review", (string)null);
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.Reward", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<int>("Hops")
                        .HasColumnType("int")
                        .HasColumnName("hops");

                    b.Property<Guid>("IdDriver")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_driver");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasColumnName("points");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reason");

                    b.HasKey("Id");

                    b.HasIndex("IdDriver");

                    b.ToTable("reward", (string)null);
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.Sponsor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("sponsor", (string)null);
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.Trip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("int")
                        .HasColumnName("available_seats");

                    b.Property<DateTimeOffset>("DtArrival")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("dt_arrival");

                    b.Property<DateTimeOffset>("DtDeparture")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("dt_departure");

                    b.Property<Guid>("IdDriver")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_driver");

                    b.Property<int>("IdStatusTrip")
                        .HasColumnType("int")
                        .HasColumnName("id_status_trip");

                    b.Property<Guid>("IdVehicle")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_vehicle");

                    b.HasKey("Id");

                    b.HasIndex("IdDriver");

                    b.HasIndex("IdStatusTrip");

                    b.HasIndex("IdVehicle");

                    b.ToTable("trip", (string)null);
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.TripLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("IdLocation")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_location");

                    b.Property<Guid>("IdTrip")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_trip");

                    b.Property<bool>("IsStart")
                        .HasColumnType("bit")
                        .HasColumnName("is_start");

                    b.HasKey("Id");

                    b.HasIndex("IdLocation");

                    b.HasIndex("IdTrip");

                    b.ToTable("trip_location", (string)null);
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.TripStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("trip_status", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "Planned"
                        },
                        new
                        {
                            Id = 2,
                            Status = "In Progress"
                        },
                        new
                        {
                            Id = 3,
                            Status = "Completed"
                        },
                        new
                        {
                            Id = 4,
                            Status = "Cancelled"
                        });
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.UserVoucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DateRedeemed")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_redeemed");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_user");

                    b.Property<Guid>("IdVoucher")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_voucher");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdVoucher");

                    b.ToTable("user_voucher", (string)null);
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("brand");

                    b.Property<int>("IdColor")
                        .HasColumnType("int")
                        .HasColumnName("id_color");

                    b.Property<Guid>("IdDriver")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_driver");

                    b.Property<string>("ImageFilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_file_path");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("model");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("plate");

                    b.Property<int>("Seats")
                        .HasColumnType("int")
                        .HasColumnName("seats");

                    b.HasKey("Id");

                    b.HasIndex("IdColor");

                    b.HasIndex("IdDriver");

                    b.ToTable("vehicle", (string)null);
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("ExpiracyDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expiracy_date");

                    b.Property<int>("HopsCost")
                        .HasColumnType("int")
                        .HasColumnName("hops_cost");

                    b.Property<Guid>("IdImage")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_image");

                    b.Property<Guid>("IdSponsor")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_sponsor");

                    b.Property<Guid>("IdVoucherStatus")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_voucher_status");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("IdImage");

                    b.HasIndex("IdSponsor");

                    b.HasIndex("IdVoucherStatus");

                    b.ToTable("voucher", (string)null);
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.VoucherStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("voucher_status", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("hopmate.Server.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("hopmate.Server.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hopmate.Server.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("hopmate.Server.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.Driver", b =>
                {
                    b.HasOne("hopmate.Server.Models.Entities.ApplicationUser", "User")
                        .WithOne()
                        .HasForeignKey("hopmate.Server.Models.Entities.Driver", "IdUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.Passenger", b =>
                {
                    b.HasOne("hopmate.Server.Models.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.PassengerTrip", b =>
                {
                    b.HasOne("hopmate.Server.Models.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("IdLocation")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("hopmate.Server.Models.Entities.Passenger", "Passenger")
                        .WithMany("PassengerTrips")
                        .HasForeignKey("IdPassenger")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hopmate.Server.Models.Entities.RequestStatus", "RequestStatus")
                        .WithMany("PassengerTrips")
                        .HasForeignKey("IdRequestStatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("hopmate.Server.Models.Entities.Trip", "Trip")
                        .WithMany("PassengerTrips")
                        .HasForeignKey("IdTrip")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Passenger");

                    b.Navigation("RequestStatus");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.Penalty", b =>
                {
                    b.HasOne("hopmate.Server.Models.Entities.ApplicationUser", "User")
                        .WithMany("Penalties")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.Review", b =>
                {
                    b.HasOne("hopmate.Server.Models.Entities.Driver", "Driver")
                        .WithMany("Reviews")
                        .HasForeignKey("IdDriver")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("hopmate.Server.Models.Entities.Passenger", "Passenger")
                        .WithMany("Reviews")
                        .HasForeignKey("IdPassenger")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Passenger");
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.Reward", b =>
                {
                    b.HasOne("hopmate.Server.Models.Entities.Driver", "Driver")
                        .WithMany("Rewards")
                        .HasForeignKey("IdDriver")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.Trip", b =>
                {
                    b.HasOne("hopmate.Server.Models.Entities.Driver", "Driver")
                        .WithMany("Trips")
                        .HasForeignKey("IdDriver")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("hopmate.Server.Models.Entities.TripStatus", "TripStatus")
                        .WithMany("Trips")
                        .HasForeignKey("IdStatusTrip")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("hopmate.Server.Models.Entities.Vehicle", "Vehicle")
                        .WithMany("Trips")
                        .HasForeignKey("IdVehicle")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("TripStatus");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.TripLocation", b =>
                {
                    b.HasOne("hopmate.Server.Models.Entities.Location", "Location")
                        .WithMany("TripLocations")
                        .HasForeignKey("IdLocation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hopmate.Server.Models.Entities.Trip", "Trip")
                        .WithMany("TripLocations")
                        .HasForeignKey("IdTrip")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.UserVoucher", b =>
                {
                    b.HasOne("hopmate.Server.Models.Entities.ApplicationUser", "User")
                        .WithMany("MemberVouchers")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hopmate.Server.Models.Entities.Voucher", "Voucher")
                        .WithMany("MemberVouchers")
                        .HasForeignKey("IdVoucher")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.Vehicle", b =>
                {
                    b.HasOne("hopmate.Server.Models.Entities.Color", "Color")
                        .WithMany("Vehicles")
                        .HasForeignKey("IdColor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("hopmate.Server.Models.Entities.Driver", "Driver")
                        .WithMany("Vehicles")
                        .HasForeignKey("IdDriver")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.Voucher", b =>
                {
                    b.HasOne("hopmate.Server.Models.Entities.Image", "Image")
                        .WithMany("Vouchers")
                        .HasForeignKey("IdImage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hopmate.Server.Models.Entities.Sponsor", "Sponsor")
                        .WithMany("Vouchers")
                        .HasForeignKey("IdSponsor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hopmate.Server.Models.Entities.VoucherStatus", "VoucherStatus")
                        .WithMany("Vouchers")
                        .HasForeignKey("IdVoucherStatus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Sponsor");

                    b.Navigation("VoucherStatus");
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.ApplicationUser", b =>
                {
                    b.Navigation("MemberVouchers");

                    b.Navigation("Penalties");
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.Color", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.Driver", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Rewards");

                    b.Navigation("Trips");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.Image", b =>
                {
                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.Location", b =>
                {
                    b.Navigation("TripLocations");
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.Passenger", b =>
                {
                    b.Navigation("PassengerTrips");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.RequestStatus", b =>
                {
                    b.Navigation("PassengerTrips");
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.Sponsor", b =>
                {
                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.Trip", b =>
                {
                    b.Navigation("PassengerTrips");

                    b.Navigation("TripLocations");
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.TripStatus", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.Vehicle", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.Voucher", b =>
                {
                    b.Navigation("MemberVouchers");
                });

            modelBuilder.Entity("hopmate.Server.Models.Entities.VoucherStatus", b =>
                {
                    b.Navigation("Vouchers");
                });
#pragma warning restore 612, 618
        }
    }
}
